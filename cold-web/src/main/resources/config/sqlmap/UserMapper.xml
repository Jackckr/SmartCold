<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.smartcold.manage.cold.dao.olddb.UserMapper" >
	<select id="findByPassword" parameterType="map" resultType="UserEntity">
		SELECT *
		FROM `User` WHERE `username` = #{username} AND `password` = #{password}
	</select>
	<select id="findById" parameterType="map" resultType="UserEntity">
		SELECT *
		FROM `User` WHERE `id` = #{id}
	</select>
  
  <!--*********************************************************************************-->
  <!--xuyanan:myself of function-->
  <!--*********************************************************************************-->
  <resultMap id="BaseResultMap" type="com.smartcold.manage.cold.entity.olddb.UserEntity" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="telephone" property="telephone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="role" property="role" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, type,username, password, telephone, email, role
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from User
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from User
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.smartcold.manage.cold.entity.olddb.UserEntity" >
    insert into User (id, username, password, 
      telephone, email, role
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{telephone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.smartcold.manage.cold.entity.olddb.UserEntity" >
    insert into User
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="telephone != null" >
        telephone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="role != null" >
        role,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.smartcold.manage.cold.entity.olddb.UserEntity" >
    update User
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null" >
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smartcold.manage.cold.entity.olddb.UserEntity" >
    update User
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- ourself -->
  <!-- 通过用户名与密码查找用户 -->
  <select id="findUserByNAndP" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from User
    where username = #{username}
    and password =#{password}
  </select>
  <!-- 通过用户名查找用户 -->
  <select id="findUserByName" parameterType="map" resultType="UserEntity">
		SELECT *
		FROM `user` WHERE `username` = #{username}
  </select>
   <!-- 查找所有用户  -->
	<select id="findAllUsers" resultMap="BaseResultMap" >
	    select 
	    <include refid="Base_Column_List" />
	    from User
	</select>
</mapper>