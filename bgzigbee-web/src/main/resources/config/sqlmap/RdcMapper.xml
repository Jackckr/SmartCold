<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.smartcold.bgzigbee.manage.dao.RdcMapper">

    <select id="getRdcByName" parameterType="map" resultType="map">
       SELECT `id`,`name` text FROM  `rdc`   where
       <if test="keyword != null">  (name like "%"#{keyword}"%" or id like "%"#{keyword}"%") AND </if>   id in (SELECT `rdcid`  FROM `sc360`.deviceobjectmapping GROUP BY `rdcid` )  LIMIT 20;
   </select>
    <select id="findRdcListbyName" parameterType="map" resultType="map">
       SELECT `id`,`name` text FROM  `rdc`   
       <if test="keyword != null and keyword != ''"> where (name like "%"#{keyword}"%" or id like "%"#{keyword}"%") </if>  LIMIT #{row};
   </select>
    <select id="findRDCByFilter" parameterType="map" resultType="com.smartcold.bgzigbee.manage.entity.RdcEntity">
        SELECT * FROM `rdc`
        <if test="startTime!=null and startTime!=''"> where  `addtime` &gt;= #{startTime} and `addtime` &lt;= #{endTime}</if>
   </select>
    

    <select id="findRdcList" parameterType="int" resultType="com.smartcold.bgzigbee.manage.entity.RdcEntity">
         SELECT r.*,u.username as username
         FROM `Rdc` as r LEFT JOIN user u on r.userid=u.id
		 <where> 
			<if test="audit != null">
			    r.audit=#{audit}
			</if>
		    <if test="keyword != null">
		        AND (name like "%"#{keyword}"%" or username like "%"#{keyword}"%")
		    </if>
		 </where>
         order by r.`updatetime` DESC,r.id DESC
    </select>

    <select id="findRDCByRDCId" parameterType="map" resultType="com.smartcold.bgzigbee.manage.entity.RdcEntity">
        SELECT * FROM `Rdc` WHERE `id` = #{rdcID}
    </select>
	
	<select id="checkName" parameterType="String" resultType="int">
		SELECT count(name) FROM `Rdc` WHERE `name` = #{name}
	</select>
	
	<select id="checkCellphone" parameterType="String" resultType="boolean">
		SELECT count(cellphone) FROM `Rdc` WHERE `cellphone` = #{cellphone}
	</select>
	<select id="getRdcMangConfig" parameterType="map" resultType="map">
           select * from rdcmanageinfo m where rdcid=#{rdcid};
	</select>
	<select id="getRdcMangtlConfig" parameterType="map" resultType="map">
           select m.rdcid, concat_ws(";",m.mtelephone,m.uTelephone,m.aTelephone) as telephone from rdcmanageinfo m where rdcid=#{rdcid};
	</select>
	<select id="getRdcById" resultType="com.smartcold.bgzigbee.manage.entity.RdcEntity">
		SELECT * FROM `rdc` WHERE `id`=#{id}
	</select>
	<insert id="addRdcMangConfig" parameterType="map" >
        INSERT rdcmanageinfo (rdcid, muid,uuid,mtelephone,uTelephone,aTelephone) values (#{rdcid}, #{muid},#{uuid},#{mtelephone},#{uTelephone},#{aTelephone});
     </insert>
	 <insert id="upRdcMangConfig" parameterType="map" >
      update rdcmanageinfo r set  muid=#{muid},uuid=#{uuid},mtelephone=#{mtelephone},uTelephone=#{uTelephone},aTelephone=#{aTelephone} where rdcid=#{rdcid};
     </insert>
	
	
    <insert id="insertRdc" parameterType="com.smartcold.bgzigbee.manage.entity.RdcEntity"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `Rdc` (
        `name`,
        `address`,
        `addtime`,
        `type`,
        `capacity`,
        `sqm`,
        `struct`,
        `storagetype`,
        `coldtype`,
        `provinceid`,
        `cityid`,
        `contact`,
        `position`,
        `cellphone`,
        `phone`,
        `commit`,
        `powerConsume`,
        `height`,
        `rentSqm`,
        `infoIntegrity`,
        `totalcapacity`,
        `capacityunit`,
        `rentcapacityunit`,
        `productcategory`,
        `buildtype`,
        `website`,
        `buildfloors`,
        `updatetime`
        )
        VALUES
        (
        #{name},
        #{address},
        now(),
        #{type},
        #{capacity},
        #{sqm},
        #{struct},
        #{storagetype},
        #{coldtype},
        #{provinceid},
        #{cityid},
        #{contact},
        #{position},
        #{cellphone},
        #{phone},
        #{commit},
        #{powerConsume},
        #{height},
        #{rentSqm},
        #{infoIntegrity},
        #{totalcapacity},
        #{capacityunit},
        #{rentcapacityunit},
        #{productcategory},
        #{buildtype},
        #{website},
        #{buildfloors},
        now()
        );
    </insert>
    <update id="updateRdc" parameterType="com.smartcold.bgzigbee.manage.entity.RdcEntity" >
        update Rdc
        <set >
			`updatetime`=now(),
            <if test="name != null">
        		name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
			  address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="addtime != null">
			  addtime = #{addtime,jdbcType=TIMESTAMP},
			</if>
			<if test="type != null">
			  type = #{type,jdbcType=INTEGER},
			</if>
			<if test="capacity != null">
			  capacity = #{capacity,jdbcType=REAL},
			</if>
			<if test="sqm != null">
			  sqm = #{sqm,jdbcType=REAL},
			</if>
			<if test="struct != null">
			  struct = #{struct,jdbcType=VARCHAR},
			</if>
			<if test="storagetype != null">
			  storagetype = #{storagetype,jdbcType=VARCHAR},
			</if>
			<if test="coldtype != null">
			  coldtype = #{coldtype,jdbcType=VARCHAR},
			</if>
			<if test="provinceid != null">
			  provinceid = #{provinceid,jdbcType=INTEGER},
			</if>
			<if test="cityid != null">
			  cityid = #{cityid,jdbcType=INTEGER},
			</if>
			<if test="contact != null">
			  contact = #{contact,jdbcType=VARCHAR},
			</if>
			<if test="position != null">
			  position = #{position,jdbcType=VARCHAR},
			</if>
			<if test="cellphone != null">
			  cellphone = #{cellphone,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
			  phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="powerConsume != null">
			  powerConsume = #{powerConsume,jdbcType=REAL},
			</if>
			<if test="commit != null">
			  commit = #{commit,jdbcType=LONGVARCHAR},
			</if>
			<if test="userId != null" >
				userId = #{userId,jdbcType=INTEGER},
			</if>
			<if test="audit != null" >
				audit = #{audit,jdbcType=INTEGER},
			</if>
			<if test="height != null" >
				height = #{height,jdbcType=REAL},
			</if>
			<if test="rentSqm != null" >
				rentSqm = #{rentSqm,jdbcType=REAL},
			</if>
			<if test="infoIntegrity != null">
				infoIntegrity = #{infoIntegrity,jdbcType=INTEGER},
			</if>
			<if test="totalcapacity != null">
				`totalcapacity` = #{totalcapacity},
			</if>
			<if test="capacityunit != null">
				`capacityunit` = #{capacityunit},
			</if>
			<if test="rentcapacityunit != null">
				`rentcapacityunit` = #{rentcapacityunit},
			</if>
			<if test="productcategory != null">
				`productcategory` = #{productcategory},
			</if>
			<if test="buildtype != null">
				`buildtype` = #{buildtype},
			</if>
			<if test="website != null">
				`website` = #{website},
			</if>
			<if test="buildfloors != null">
				`buildfloors` = #{buildfloors},
			</if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <update id="updateMappingById" parameterType="map">
	    UPDATE `Rdc` SET mapping=#{mapping}
	    WHERE `id` = #{rdcId}
	</update>
	
	<delete id="deleteByRdcID">
		delete from rdc where id = #{rdcID}
	</delete>
	
	<update id="changeAudit">
		update rdc set audit=#{audit}
		where id=#{rdcID}
	</update>
	<update id="changeStand">
		update `rdc` set `istemperaturestandard`=#{stand}
		where id=#{rdcID}
	</update>
</mapper>